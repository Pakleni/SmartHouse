/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userclient;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
import java.net.URLEncoder;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**
 *
 * @author pakleni
 */
public class SmartHouseClient extends javax.swing.JFrame {

    /**
     * Creates new form Client
     */
    public SmartHouseClient() {
        initComponents();
    }
    
    int year = Calendar.getInstance().get(Calendar.YEAR);
            
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        loginResponse = new javax.swing.JPanel();
        username = new javax.swing.JTextField();
        password = new javax.swing.JPasswordField();
        jPanel1 = new javax.swing.JPanel();
        speakerSongName = new javax.swing.JTextField();
        playSong = new javax.swing.JButton();
        getHistory = new javax.swing.JButton();
        historyList = new java.awt.List();
        jPanel2 = new javax.swing.JPanel();
        hourSlider = new javax.swing.JSlider();
        minuteSlider = new javax.swing.JSlider();
        setAlarm = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        alarmSongField = new javax.swing.JTextField();
        setAlarmSound = new javax.swing.JButton();
        checkPeriodic = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        monthChoice = new java.awt.Choice();
        yearChoice = new java.awt.Choice();
        dayChoice = new java.awt.Choice();
        planHrs = new java.awt.Choice();
        planMins = new java.awt.Choice();
        planNameTextField = new javax.swing.JTextField();
        addressTextField = new javax.swing.JTextField();
        cityTextField = new javax.swing.JTextField();
        durHrs = new java.awt.Choice();
        durMins = new java.awt.Choice();
        newPlanButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        planList = new java.awt.List();
        updatePlanButton = new javax.swing.JButton();
        deletePlanButton = new javax.swing.JButton();
        setAlarmPlanButton = new javax.swing.JButton();
        getPlans = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        username.setText("Pakleni");

        password.setText("glupasif");

        javax.swing.GroupLayout loginResponseLayout = new javax.swing.GroupLayout(loginResponse);
        loginResponse.setLayout(loginResponseLayout);
        loginResponseLayout.setHorizontalGroup(
            loginResponseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginResponseLayout.createSequentialGroup()
                .addGap(160, 160, 160)
                .addGroup(loginResponseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(username, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                    .addComponent(password, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE))
                .addGap(160, 160, 160))
        );
        loginResponseLayout.setVerticalGroup(
            loginResponseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginResponseLayout.createSequentialGroup()
                .addContainerGap(74, Short.MAX_VALUE)
                .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
        );

        jTabbedPane1.addTab("User", loginResponse);

        speakerSongName.setText("Enter Song Name");

        playSong.setText("Play");
        playSong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playSongActionPerformed(evt);
            }
        });

        getHistory.setText("Get History");
        getHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getHistoryActionPerformed(evt);
            }
        });

        historyList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                historyListMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(speakerSongName, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                    .addComponent(playSong, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(getHistory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(historyList, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(historyList, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(speakerSongName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(playSong, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(getHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(24, 24, 24))
        );

        jTabbedPane1.addTab("Speaker", jPanel1);

        hourSlider.setMaximum(23);
        hourSlider.setPaintLabels(true);
        hourSlider.setValue(12);
        hourSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                hourSliderStateChanged(evt);
            }
        });

        minuteSlider.setMaximum(59);
        minuteSlider.setPaintLabels(true);
        minuteSlider.setToolTipText("");
        minuteSlider.setValue(0);
        minuteSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minuteSliderStateChanged(evt);
            }
        });

        setAlarm.setText("Set Alarm");
        setAlarm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setAlarmActionPerformed(evt);
            }
        });

        jLabel1.setText("HOURS");
        jLabel1.setText("HOURS: " +hourSlider.getValue());

        jLabel2.setText("MINUTES");
        jLabel2.setText("MINUTES: " +minuteSlider.getValue());

        alarmSongField.setText("Enter Song Name");

        setAlarmSound.setText("Set Alarm Sound");
        setAlarmSound.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setAlarmSoundActionPerformed(evt);
            }
        });

        checkPeriodic.setText("Periodic");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(hourSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                        .addComponent(minuteSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(231, 231, 231)
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(102, 102, 102))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(alarmSongField)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(174, 174, 174)
                        .addComponent(setAlarm, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(checkPeriodic))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(175, 175, 175)
                        .addComponent(setAlarmSound, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(90, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(hourSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minuteSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setAlarm, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkPeriodic))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(alarmSongField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(setAlarmSound, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(164, 164, 164))
        );

        jTabbedPane1.addTab("Alarm", jPanel2);

        monthChoice.add("JAN");
        monthChoice.add("FEB");
        monthChoice.add("MAR");
        monthChoice.add("APR");
        monthChoice.add("MAY");
        monthChoice.add("JUN");
        monthChoice.add("JUL");
        monthChoice.add("AVG");
        monthChoice.add("SEP");
        monthChoice.add("OKT");
        monthChoice.add("NOV");
        monthChoice.add("DEC");
        monthChoice.setName(""); // NOI18N
        monthChoice.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                monthChoiceItemStateChanged(evt);
            }
        });
        monthChoice.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                monthChoicePropertyChange(evt);
            }
        });

        for (int i = 0; i < 5; i++){
            yearChoice.add(""+ (year + i));
        }
        yearChoice.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                yearChoiceItemStateChanged(evt);
            }
        });

        for (int i = 1; i <= 31; i++) {
            dayChoice.add(""+i);
        }

        for (int i=0; i < 24; i++){
            planHrs.add(""+i);
        }

        for (int i = 0; i < 60; i++){
            planMins.add(""+i);
        }

        planNameTextField.setText("Plan Name");

        addressTextField.setText("Address");

        cityTextField.setText("City");

        for (int i=0; i < 24; i++){
            durHrs.add(""+i);
        }

        for (int i = 0; i < 60; i++){
            durMins.add(""+i);
        }

        newPlanButton.setText("New Plan");
        newPlanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPlanButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("  Duration");

        planList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                planListMousePressed(evt);
            }
        });
        planList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                planListActionPerformed(evt);
            }
        });
        planList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                planListKeyPressed(evt);
            }
        });

        updatePlanButton.setText("Update");
        updatePlanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePlanButtonActionPerformed(evt);
            }
        });

        deletePlanButton.setText("Delete");
        deletePlanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePlanButtonActionPerformed(evt);
            }
        });

        setAlarmPlanButton.setText("Set Alarm");
        setAlarmPlanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setAlarmPlanButtonActionPerformed(evt);
            }
        });

        getPlans.setText("Get Plans");
        getPlans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getPlansActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(durHrs, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(durMins, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newPlanButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(setAlarmPlanButton))
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(yearChoice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(planHrs, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(monthChoice, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(dayChoice, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(planMins, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(planNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(addressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(updatePlanButton, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                            .addComponent(deletePlanButton, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                            .addComponent(getPlans, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(planList, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(96, 96, 96))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(planList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(dayChoice, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                                .addComponent(monthChoice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(yearChoice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(getPlans))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(planMins, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(planHrs, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(planNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(updatePlanButton)))
                        .addGap(8, 8, 8)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(deletePlanButton))
                            .addComponent(addressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(durHrs, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(durMins, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(newPlanButton)
                                .addComponent(setAlarmPlanButton)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Planer", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private static final String link = "http://localhost:8080/UserService/resources";

    private String getAuth(){
        String usernameAndPassword = username.getText() + ":" + password.getText();
        return "Basic " + java.util.Base64.getEncoder().encodeToString( usernameAndPassword.getBytes() );
    }
    
    private void getHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getHistoryActionPerformed
        
        URL url;
        try {
            url = new URL(link + "/speaker/history");

            HttpURLConnection con = (HttpURLConnection) url.openConnection();

            con.setRequestMethod("GET");
            con.setConnectTimeout(5000);
            con.setReadTimeout(5000);
            
            con.setRequestProperty("Authorization", getAuth());
                    
            Reader in = new BufferedReader(new InputStreamReader(con.getInputStream(), "UTF-8"));
            
            JSONParser parser = new JSONParser();
            JSONArray obj = (JSONArray) parser.parse(in);
            
            historyList.removeAll();
            for (int i = 0; i < obj.size(); i++) {
                historyList.add((String)obj.get(i));
            }
            
        } catch (MalformedURLException ex) {
            Logger.getLogger(SmartHouseClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ProtocolException | ParseException ex) {
            Logger.getLogger(SmartHouseClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Error err = new Error(this, true);
        }
    }//GEN-LAST:event_getHistoryActionPerformed
    
    private void playSongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playSongActionPerformed
        
        URL url;
        try {
            url = new URL(link + "/speaker/play/" + URLEncoder.encode(speakerSongName.getText(), "UTF-8"));
        

            HttpURLConnection con = (HttpURLConnection) url.openConnection();

            con.setRequestMethod("GET");
            con.setConnectTimeout(5000);
            con.setReadTimeout(5000);
            
            con.setRequestProperty("Authorization", getAuth());
            
            con.getInputStream();
            
        } catch (MalformedURLException ex) {
            Logger.getLogger(SmartHouseClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ProtocolException ex) {
            Logger.getLogger(SmartHouseClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Error err = new Error(this, true);
        }
    }//GEN-LAST:event_playSongActionPerformed

    private void minuteSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_minuteSliderStateChanged
        jLabel2.setText("MINUTES: " +minuteSlider.getValue());
    }//GEN-LAST:event_minuteSliderStateChanged

    private void hourSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_hourSliderStateChanged
        jLabel1.setText("HOURS: " +hourSlider.getValue());
    }//GEN-LAST:event_hourSliderStateChanged

    private void monthChoicePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_monthChoicePropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_monthChoicePropertyChange

    private void monthChoiceItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_monthChoiceItemStateChanged
        
        boolean leap = (Integer.parseInt(yearChoice.getSelectedItem()) % 4) == 0;
        int[] days = {31, 28 + (leap ? 1 : 0), 31, 30, 31, 30 ,31, 31, 30, 28, 29, 31};
        
        int i = monthChoice.getSelectedIndex();
        
        int n = dayChoice.getItemCount();
        
        if (n > days[i]) {
            for (int j = n; j > days[i]; j--) {
                dayChoice.remove(j-1);
            }
            return;
        }
        
        for (int j = n + 1; j <= days[i]; j ++) {
            dayChoice.add("" + j);
        }
    }//GEN-LAST:event_monthChoiceItemStateChanged

    private void yearChoiceItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_yearChoiceItemStateChanged
        monthChoiceItemStateChanged(evt);
    }//GEN-LAST:event_yearChoiceItemStateChanged

    private void historyListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_historyListMouseClicked
        URL url;
        try {
            url = new URL(link + "/speaker/play/" + URLEncoder.encode(historyList.getSelectedItem(), "UTF-8"));
        

            HttpURLConnection con = (HttpURLConnection) url.openConnection();

            con.setRequestMethod("GET");
            con.setConnectTimeout(5000);
            con.setReadTimeout(5000);
            
            con.setRequestProperty("Authorization", getAuth());
            
            con.getInputStream();
            
        } catch (MalformedURLException ex) {
            Logger.getLogger(SmartHouseClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ProtocolException ex) {
            Logger.getLogger(SmartHouseClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Error err = new Error(this, true);
        }
    }//GEN-LAST:event_historyListMouseClicked

    private void setAlarmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setAlarmActionPerformed
        URL url;
        try {
            url = new URL(link + "/alarm/new/"
                    + "?time=" + (hourSlider.getValue() * 60 + minuteSlider.getValue())
                    + "&periodic=" + (checkPeriodic.isSelected() ? 1 : 0)
            );
        
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            
            con.setRequestMethod("GET");
            con.setConnectTimeout(5000);
            con.setReadTimeout(5000);
            
            con.setRequestProperty("Authorization", getAuth());
            
            con.getInputStream();
            
        } catch (MalformedURLException ex) {
            Logger.getLogger(SmartHouseClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ProtocolException ex) {
            Logger.getLogger(SmartHouseClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Error err = new Error(this, true);
        }
    }//GEN-LAST:event_setAlarmActionPerformed

    private void setAlarmSoundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setAlarmSoundActionPerformed
        URL url;
        try {
            url = new URL(link + "/alarm/song/"
                    + URLEncoder.encode(alarmSongField.getText(), "UTF-8")
            );
        
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            
            con.setRequestMethod("GET");
            con.setConnectTimeout(5000);
            con.setReadTimeout(5000);
            
            con.setRequestProperty("Authorization", getAuth());
            
            con.getInputStream();
            
        } catch (MalformedURLException ex) {
            Logger.getLogger(SmartHouseClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ProtocolException ex) {
            Logger.getLogger(SmartHouseClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Error err = new Error(this, true);
        }
    }//GEN-LAST:event_setAlarmSoundActionPerformed

    private void newPlanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPlanButtonActionPerformed
        URL url;
        
        try {
            int duration = (durHrs.getSelectedIndex() * 60 + durMins.getSelectedIndex()) * 60 * 1000;
            String name = URLEncoder.encode(planNameTextField.getText(), "UTF-8");
            String address = this.addressTextField.getText();
            String city = this.cityTextField.getText();
            String location;

            if (address.equals("Address") && city.equals("City")){
                location = "";
            }
            else {
                location = URLEncoder.encode((address + ", " + city), "UTF-8");

            }
        
        
            int year, month, day, hour, minute;

            year = Integer.parseInt(this.yearChoice.getSelectedItem());
            month = this.monthChoice.getSelectedIndex();
            day = Integer.parseInt(this.dayChoice.getSelectedItem());
            hour = this.planHrs.getSelectedIndex();
            minute = this.planMins.getSelectedIndex();

            Calendar cal = Calendar.getInstance();
            cal.set(year, month, day, hour, minute, 0);
            
            System.out.println(cal.getTime());
            
            long time = cal.getTime().getTime();
        
        
            url = new URL(link + "/planer/create/"
                    + "?duration=" + duration
                    + "&name=" + name
                    + "&location=" + location
                    + "&time=" + time
            );
        
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            
            con.setRequestMethod("GET");
            con.setConnectTimeout(5000);
            con.setReadTimeout(5000);
            
            con.setRequestProperty("Authorization", getAuth());
            
            Reader in = new BufferedReader(new InputStreamReader(con.getInputStream(), "UTF-8"));
            
            JSONParser parser = new JSONParser();
            JSONObject obj = (JSONObject) parser.parse(in);
            
            boolean good = (boolean)obj.get("good");
            
            if (!good) {
                Error err = new Error(this, true, "You can't make it to this!");
            }
            
        } catch (MalformedURLException | ProtocolException | ParseException ex) {
            Logger.getLogger(SmartHouseClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Error err = new Error(this, true);
        }
    }//GEN-LAST:event_newPlanButtonActionPerformed
    
    private JSONArray planObjList = new JSONArray();
    
    private void getPlansActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getPlansActionPerformed
        URL url;
        
        try {
            url = new URL(link + "/planer/read/"
            );
        
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            
            con.setRequestMethod("GET");
            con.setConnectTimeout(5000);
            con.setReadTimeout(5000);
            
            con.setRequestProperty("Authorization", getAuth());
            
            Reader in = new BufferedReader(new InputStreamReader(con.getInputStream(), "UTF-8"));
            
            JSONParser parser = new JSONParser();
            JSONArray obj = (JSONArray) parser.parse(in);
            
            this.planList.removeAll();
            for (int i = 0; i < obj.size(); i++) {
                planList.add((String)((JSONObject)obj.get(i)).get("name"));
            }
            
            planObjList = obj;
            
        } catch (MalformedURLException | ProtocolException | ParseException ex) {
            Logger.getLogger(SmartHouseClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Error err = new Error(this, true);
        }
    }//GEN-LAST:event_getPlansActionPerformed

    private void planListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_planListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_planListActionPerformed

    private void deletePlanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePlanButtonActionPerformed
        URL url;
        
        if (planObjList.isEmpty() || planList.getSelectedIndex() == -1) return;
        
        long id = (long)(((JSONObject)planObjList.get(planList.getSelectedIndex())).get("id"));
        
        try {
            url = new URL(link + "/planer/delete/"+
                    "?id=" + id
            );
        
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            
            con.setRequestMethod("GET");
            con.setConnectTimeout(5000);
            con.setReadTimeout(5000);
            
            con.setRequestProperty("Authorization", getAuth());
            
            con.getInputStream();
            
        } catch (MalformedURLException | ProtocolException ex) {
            Logger.getLogger(SmartHouseClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Error err = new Error(this, true);
        }
    }//GEN-LAST:event_deletePlanButtonActionPerformed

    private void setAlarmPlanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setAlarmPlanButtonActionPerformed
        URL url;
        
        if (planObjList.isEmpty() || planList.getSelectedIndex() == -1) return;
        
        long id = (long)(((JSONObject)planObjList.get(planList.getSelectedIndex())).get("id"));
        
        try {
            url = new URL(link + "/planer/alarm/"+
                    "?id=" + id
            );
        
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            
            con.setRequestMethod("GET");
            con.setConnectTimeout(5000);
            con.setReadTimeout(5000);
            
            con.setRequestProperty("Authorization", getAuth());
            
            con.getInputStream();
            
        } catch (MalformedURLException | ProtocolException ex) {
            Logger.getLogger(SmartHouseClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Error err = new Error(this, true);
        }
    }//GEN-LAST:event_setAlarmPlanButtonActionPerformed

    private void planListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_planListKeyPressed
        
    }//GEN-LAST:event_planListKeyPressed

    private void planListMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_planListMousePressed
        if (planObjList.isEmpty() || planList.getSelectedIndex() == -1) return;
        
        JSONObject obj = (JSONObject)planObjList.get(planList.getSelectedIndex());
        
        this.planNameTextField.setText((String)obj.get("name"));

        
        if (obj.containsKey("location")){
            String location = (String)obj.get("location");
            
            String[] locs = location.split(",");
            this.addressTextField.setText(locs[0]);
            this.cityTextField.setText(locs[1]);
        }
        
        int duration = ((Long) obj.get("duration")).intValue();
        
        duration /= 60 * 1000;
        
        durMins.select(duration % 60);
        durHrs.select(duration / 60);
        
        long time = (long)obj.get("time");
        
        Date date = new Date(time);
        
        Calendar cal = Calendar.getInstance();
        
        cal.setTime(date);
        System.out.println(date);
        this.yearChoice.select(cal.get(Calendar.YEAR)-year);
        this.monthChoice.select(cal.get(Calendar.MONTH));
        this.dayChoice.select(cal.get(Calendar.DAY_OF_MONTH) - 1);
        
//        System.out.println((time/(1000*60))%(1440));        
        
        System.out.println(time);
        
        planHrs.select(cal.get(Calendar.HOUR_OF_DAY));
        planMins.select(cal.get(Calendar.MINUTE));
        
    }//GEN-LAST:event_planListMousePressed

    private void updatePlanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePlanButtonActionPerformed
        URL url;
        
        if (planObjList.isEmpty() || planList.getSelectedIndex() == -1) return;
        
        long id = (long)(((JSONObject)planObjList.get(planList.getSelectedIndex())).get("id"));
        
        try {
            int duration = (durHrs.getSelectedIndex() * 60 + durMins.getSelectedIndex()) * 60 * 1000;
            String name = URLEncoder.encode(planNameTextField.getText(), "UTF-8");
            String address = this.addressTextField.getText();
            String city = this.cityTextField.getText();
            String location;

            if (address.equals("Address") && city.equals("City")){
                location = "";
            }
            else {
                location = URLEncoder.encode((address + ", " + city), "UTF-8");

            }
        
        
            int year, month, day, hour, minute;

            year = Integer.parseInt(this.yearChoice.getSelectedItem());
            month = this.monthChoice.getSelectedIndex();
            day = Integer.parseInt(this.dayChoice.getSelectedItem());
            hour = this.planHrs.getSelectedIndex();
            minute = this.planMins.getSelectedIndex();

            Calendar cal = Calendar.getInstance();
            cal.set(year, month, day, hour, minute, 0);
            
            System.out.println(cal.getTime());
            
            long time = cal.getTime().getTime();
        
        
            url = new URL(link + "/planer/update/"
                    + "?duration=" + duration
                    + "&name=" + name
                    + "&location=" + location
                    + "&time=" + time
                    + "&id=" + id
            );
        
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            
            con.setRequestMethod("GET");
            con.setConnectTimeout(5000);
            con.setReadTimeout(5000);
            
            con.setRequestProperty("Authorization", getAuth());
            
            Reader in = new BufferedReader(new InputStreamReader(con.getInputStream(), "UTF-8"));
            
            JSONParser parser = new JSONParser();
            JSONObject obj = (JSONObject) parser.parse(in);
            
            boolean good = (boolean)obj.get("good");
            
            if (!good) {
                Error err = new Error(this, true, "You can't make it to this!");
            }
            
        } catch (MalformedURLException | ProtocolException | ParseException ex) {
            Logger.getLogger(SmartHouseClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Error err = new Error(this, true);
        }
    }//GEN-LAST:event_updatePlanButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SmartHouseClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SmartHouseClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SmartHouseClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SmartHouseClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SmartHouseClient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addressTextField;
    private javax.swing.JTextField alarmSongField;
    private javax.swing.JCheckBox checkPeriodic;
    private javax.swing.JTextField cityTextField;
    private java.awt.Choice dayChoice;
    private javax.swing.JButton deletePlanButton;
    private java.awt.Choice durHrs;
    private java.awt.Choice durMins;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JButton getHistory;
    private javax.swing.JButton getPlans;
    private java.awt.List historyList;
    private javax.swing.JSlider hourSlider;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel loginResponse;
    private javax.swing.JSlider minuteSlider;
    private java.awt.Choice monthChoice;
    private javax.swing.JButton newPlanButton;
    private javax.swing.JPasswordField password;
    private java.awt.Choice planHrs;
    private java.awt.List planList;
    private java.awt.Choice planMins;
    private javax.swing.JTextField planNameTextField;
    private javax.swing.JButton playSong;
    private javax.swing.JButton setAlarm;
    private javax.swing.JButton setAlarmPlanButton;
    private javax.swing.JButton setAlarmSound;
    private javax.swing.JTextField speakerSongName;
    private javax.swing.JButton updatePlanButton;
    private javax.swing.JTextField username;
    private java.awt.Choice yearChoice;
    // End of variables declaration//GEN-END:variables
}
